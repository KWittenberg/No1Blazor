@page "/category"

@* @inject IJSRuntime JsRuntime *@
@inject ICategoryRepository CategoryRepository

@rendermode InteractiveServer

<PageTitle>Category</PageTitle>


<!-- Category -->
<div class="page-title-overlap bg-dark pt-4">
    <div class="container d-lg-flex justify-content-between py-2 py-lg-3">
        <div class="order-lg-1 pr-lg-4 text-center text-lg-left">
            <h1 class="h3 text-light mb-0">Category</h1>
        </div>
    </div>
</div>

<!-- Category Content -->
<div class="container pb-5 mb-2 mb-md-3">
    <!-- Toolbar -->
    <div class="d-flex justify-content-between align-items-center pt-lg-2 pb-4 pb-lg-5 mb-lg-3">
        <div class="form-inline">
            <label class="text-light opacity-75 text-nowrap mr-2 d-none d-lg-block" for="order-sort">Sort orders:</label>
            <select class="form-control custom-select" id="order-sort">
                <option>All</option>
                <option>Name</option>
                <option>Description</option>
            </select>
        </div>
        <a class="btn btn-primary btn-sm d-none d-lg-inline-block" href="/categoryadd"><i class="czi-sign-out mr-2"></i>Add new Category</a>
    </div>
    <!-- Category list -->
    <div class="table-responsive font-size-md">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th class="py-3 text-center">#</th>
                    <th class="py-3 text-center">Name</th>
                    <th class="py-3 text-center">Description</th>
                    <th class="py-3 text-right">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Categories is not null && Categories.Data is not null)
                {
                    @foreach (var item in Categories.Data)
                    {
                        <tr>
                            <td class="py-3 text-center"><i class="@item.IconHtml"></i></td>
                            <td class="py-3 text-center">@item.Name</td>
                            <td class="py-3 text-center">@item.Description</td>
                            <td class="py-3 text-right">

                                @* <form method="post" data-enhance @onsubmit="@(() => DeleteCategory(item.Id))" @formname="@($"DeleteCategoryForm{item.Id}")">
                        <AntiforgeryToken />
                        <button class="btn btn-primary btn-sm" type="submit">Delete</button>
                        </form> *@

                                <a class="nav-link-style mr-2" href="/categoryadd/@item.Id" data-toggle="tooltip" title="Edit"><i class="czi-edit"></i></a>
                                @* <a class="nav-link-style mr-2" href="" @onclick="() => ViewCategory(item.Id)" data-toggle="tooltip" title="Edit"><i class="czi-edit"></i></a> *@

                                <a class="nav-link-style text-danger" href="#delete-modal" data-toggle="modal" title="Remove"><div class="czi-trash"></div></a>

                                <a class="nav-link-style text-danger" href="" @onclick="() => DeleteCategory(item.Id)" data-toggle="tooltip" title="Remove"><div class="czi-trash"></div></a>
                            </td>
                        </tr>
                        No += 1;
                    }
                }
                else
                {
                    <tr>
                        <td class="text-center" colspan="4">Loading...</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br class="pb-4">
</div>

@code {
    private int No = 1;

    // [Inject]
    // private IJSRuntime JSRuntime { get; set; }

    private Response<List<CategoryOutput>> Categories;

    // private Response<CategoryOutput> CategoryOutput;


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        Categories = await CategoryRepository.GetAllAsync();
    }

    // private async void ViewCategory(Guid id)
    // {
    //     CategoryOutput = await CategoryRepository.GetByIdAsync(id);
    //     await LogToConsole(CategoryOutput);
    // }

    private async void DeleteCategory(Guid Id)
    {
        // await LogToConsole($"Delete Category Id: {Id}");
        await CategoryRepository.DeleteAsync(Id);
        await LoadCategories();
        StateHasChanged();
    }




    // private async Task LogToConsole(object data)
    // {
    //     await JsRuntime.InvokeVoidAsync("console.log", data);
    // }
}