@page "/categoryadd"
@page "/categoryadd/{id}"

@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>New Category</PageTitle>


<!-- Category -->
<div class="page-title-overlap bg-dark pt-4">
    <div class="container d-lg-flex justify-content-between py-2 py-lg-3">
        <div class="order-lg-1 pr-lg-4 text-center text-lg-left">
            <h1 class="h3 text-light mb-0">New Category</h1>
        </div>
    </div>
    <br class="mb-5 ">
</div>

<!-- Category Content -->
<div class="container pb-5 mb-2 mb-md-3">
    <div class="mt-3 col-6 container">
        <div class="card border-0 box-shadow">
            <div class="card-body">
                <h2 class="h4 mb-1">Add new Category</h2>
                @if (CategoryInput is not null)
                {
                    <EditForm Enhance Model="@CategoryInput" OnValidSubmit="HandleValidSubmit" FormName="AddCategoryForm" class="needs-validation">
                        <DataAnnotationsValidator />
                        <div class="mt-4 input-group-overlay form-group">
                            <label for="name" class="ml-4 form-label">Name</label>
                            <InputText id="name" class="form-control prepended-form-control" @bind-Value="CategoryInput.Name" type="text" placeholder="Name" required />
                            <ValidationMessage For="() => CategoryInput.Name" />
                        </div>
                        <div class="mt-2 input-group-overlay form-group">
                            <label for="description" class="ml-4 form-label">Description</label>
                            <InputText id="description" class="form-control prepended-form-control" @bind-Value="CategoryInput.Description" type="text" placeholder="Description" />
                            <ValidationMessage For="@(() => CategoryInput.Description)" />
                        </div>
                        <div class="mt-2 input-group-overlay form-group">
                            <label for="iconHtml" class="ml-4 form-label">IconHtml</label>
                            <InputText id="iconHtml" class="form-control prepended-form-control" @bind-Value="CategoryInput.IconHtml" type="text" placeholder="IconHtml" />
                            <ValidationMessage For="@(() => CategoryInput.IconHtml)" />
                        </div>
                        <div class="text-right pt-4">
                            <a href="/category" class="btn btn-secondary">Back</a>
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <p><em>Loading...</em></p>
                }
            </div>
        </div>
    </div>
    <br class="pb-4">
</div>


@code {

    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    private CategoryInput? CategoryInput { get; set; }

    private Response<CategoryOutput> CategoryOutput;


    protected override async Task OnParametersSetAsync()
    {
        if (CategoryInput is not null) return;

        if (!string.IsNullOrWhiteSpace(Id))
        {
            CategoryOutput = await CategoryRepository.GetByIdAsync(Guid.Parse(Id));

            CategoryInput = new CategoryInput()
                {
                    Name = CategoryOutput.Data.Name,
                    Description = CategoryOutput.Data.Description,
                    IconHtml = CategoryOutput.Data.IconHtml
                };
        }
        else
        {
            CategoryInput = new CategoryInput()
                {
                    Name = string.Empty,
                    Description = string.Empty,
                    IconHtml = string.Empty
                };
        }
    }

    private async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(CategoryInput);

        if (Id is null)
        {
            await CategoryRepository.AddAsync(CategoryInput);
            CategoryInput = new CategoryInput(); // Clear the form after submission
        }
        else
        {
            await CategoryRepository.UpdateAsync(Guid.Parse(Id), CategoryInput);
        }

        NavigationManager.NavigateTo("/category");
    }
}