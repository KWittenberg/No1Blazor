@page "/category"
@inject ICategoryRepository CategoryRepository
@* @rendermode InteractiveServer *@

<PageTitle>Category</PageTitle>


<!-- Category -->
<div class="page-title-overlap bg-dark pt-4">
    <div class="container d-lg-flex justify-content-between py-2 py-lg-3">
        <div class="order-lg-1 pr-lg-4 text-center text-lg-left">
            <h1 class="h3 text-light mb-0">Category</h1>
        </div>
    </div>
</div>

<!-- Category Content -->
<div class="container pb-5 mb-2 mb-md-3">
    <!-- Toolbar -->
    <div class="d-flex justify-content-between align-items-center pt-lg-2 pb-4 pb-lg-5 mb-lg-3">
        <div class="form-inline">
            <label class="text-light opacity-75 text-nowrap mr-2 d-none d-lg-block" for="order-sort">Sort orders:</label>
            <select class="form-control custom-select" id="order-sort">
                <option>All</option>
                <option>Name</option>
                <option>Description</option>
            </select>
        </div>
        <a class="btn btn-primary btn-sm d-none d-lg-inline-block" href="#"><i class="czi-sign-out mr-2"></i>Add new Category</a>
    </div>
    <!-- Category list -->
    <div class="table-responsive font-size-md">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th class="py-3 text-center">#</th>
                    <th class="py-3 text-center">Name</th>
                    <th class="py-3 text-center">Description</th>
                    <th class="py-3 text-right">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Categories is not null && Categories.Data is not null)
                {
                    @foreach (var item in Categories.Data)
                    {
                        <tr>
                            <td class="py-3 text-center">@No</td>
                            <td class="py-3 text-center">@item.Name</td>
                            <td class="py-3 text-center">@item.Description</td>
                            <td class="py-3 text-right">

                                @* <button class="btn btn-primary btn-sm" @onclick="@(() => ViewCategory(item.Id))">Edit</button> *@
                                @* <button class="btn btn-primary btn-sm" @onclick="@(() => DeleteCategory(item.Id))">Del</button> *@

                                @* <form method="post" data-enhance @onsubmit="@(() => DeleteCategory(item.Id))" @formname="@($"DeleteCategoryForm{item.Id}")">
                        <AntiforgeryToken />
                        <button class="btn btn-primary btn-sm" type="submit">Delete</button>
                        </form> *@

                                <a class="nav-link-style mr-2" href="#" data-toggle="tooltip" title="Edit"><i class="czi-edit"></i></a>
                                <a class="nav-link-style text-danger" @onclick="@(() => DeleteCategory(item.Id))" data-toggle="tooltip" title="Remove"><div class="czi-trash"></div></a>
                            </td>
                        </tr>
                        No += 1;
                    }
                }
                else
                {
                    <tr>
                        <td class="text-center" colspan="4">Loading...</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br class="pb-4">
    <div class="text-sm-right"><a class="btn btn-primary" href="#add-address" data-toggle="modal">Add new Category</a></div>


    <div class="mt-3 col-6 container">
        <EditForm Enhance Model="@CategoryInput" OnValidSubmit="HandleValidSubmit" FormName="AddCategoryForm">
            <DataAnnotationsValidator />
            <div class="mb-3 form-group">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="CategoryInput.Name" />
                <ValidationMessage For="@(() => CategoryInput.Name)" />
            </div>
            <div class="mb-3 form-group">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" class="form-control" @bind-Value="CategoryInput.Description" />
                <ValidationMessage For="@(() => CategoryInput.Description)" />
            </div>
            <div class="text-end">
                <button type="submit" class="btn btn-primary">Add Category</button>
            </div>
        </EditForm>
    </div>

</div>

@code {
    int No = 1;

    private Response<List<CategoryOutput>> Categories;

    //[SupplyParameterFromForm]
    [SupplyParameterFromForm(FormName = "AddCategoryForm")]
    private CategoryInput CategoryInput { get; set; } = new();

    private Response<CategoryOutput> CategoryOutput;


    //[SupplyParameterFromForm(FormName = "DeleteCategoryForm")]
    [SupplyParameterFromForm]
    public Guid Id { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    async Task LoadCategories()
    {
        Categories = await CategoryRepository.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        await CategoryRepository.AddCategoryAsync(CategoryInput);
        await LoadCategories();
        CategoryInput = new CategoryInput(); // Clear the form after submission
    }

    // async void ViewCategory(Guid id)
    // {
    //     CategoryInput = await CategoryRepository.GetByIdAsync(id);
    // }

    async void DeleteCategory(Guid Id)
    {
        //System.Diagnostics.Debug.WriteLine("DeleteCategory method called with id: " + id);
        //Console.WriteLine("DeleteCategory method called with id: " + id);

        await CategoryRepository.DeleteAsync(Id);
        await LoadCategories();
    }
}