@page "/category"
@inject ICategoryRepository CategoryRepository

<PageTitle>Category</PageTitle>



<h1>Category</h1>

<div class="mt-3 col-6 container">
    <EditForm Enhance Model="@CategoryInput" OnValidSubmit="HandleValidSubmit" FormName="AddCategoryForm">
        <DataAnnotationsValidator />
        <div class="mb-3 form-group">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="CategoryInput.Name" />
            <ValidationMessage For="@(() => CategoryInput.Name)" />
        </div>
        <div class="mb-3 form-group">
            <label for="description" class="form-label">Description</label>
            <InputText id="description" class="form-control" @bind-Value="CategoryInput.Description" />
            <ValidationMessage For="@(() => CategoryInput.Description)" />
        </div>
        <div class="text-end">
            <button type="submit" class="btn btn-primary">Add Category</button>
        </div>
    </EditForm>
</div>


<table class="mt-5 table table-hover">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#addCategory">
                    <i class="bi bi-plus"></i> Add
                </button>
            </th>
        </tr>
    </thead>
    <tbody class="table-group-divider">
        @if (Categories is not null && Categories.Data is not null)
        {
            @foreach (var item in Categories.Data)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>
                        @* <button class="btn btn-primary btn-sm" @onclick="@(() => ViewCategory(item.Id))">Edit</button> *@

                        <form method="post" data-enhance @onsubmit="@(() => DeleteCategory(item.Id))" @formname="@($"DeleteCategoryForm{item.Id}")">
                            <AntiforgeryToken />
                            <button class="btn btn-primary btn-sm" type="submit">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td class="text-center" colspan="4">Loading...</td>
            </tr>
        }
    </tbody>
</table>




@code {
    private Response<List<CategoryOutput>> Categories;

    //[SupplyParameterFromForm]
    [SupplyParameterFromForm(FormName = "AddCategoryForm")]
    private CategoryInput CategoryInput { get; set; } = new();

    private Response<CategoryOutput> CategoryOutput;


    //[SupplyParameterFromForm(FormName = "DeleteCategoryForm")]
    [SupplyParameterFromForm]
    public Guid Id { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    async Task LoadCategories()
    {
        Categories = await CategoryRepository.GetAllAsync();
    }

    private async Task HandleValidSubmit()
    {
        await CategoryRepository.AddCategoryAsync(CategoryInput);
        await LoadCategories();
        CategoryInput = new CategoryInput(); // Clear the form after submission
    }

    // async void ViewCategory(Guid id)
    // {
    //     CategoryInput = await CategoryRepository.GetByIdAsync(id);
    // }

    async void DeleteCategory(Guid Id)
    {
        //System.Diagnostics.Debug.WriteLine("DeleteCategory method called with id: " + id);
        //Console.WriteLine("DeleteCategory method called with id: " + id);

        await CategoryRepository.DeleteAsync(Id);
        await LoadCategories();
    }
}